import type { AriaAttributes, ClassValue, HTMLAnchorAttributes } from "svelte/elements";

/**
 * Defines the data type of all `hash` properties found in almost all of the library's components.
 */
export type Hash = boolean | string;

/**
 * Defines the possible values for the `preserveQuery` option or component property in components or functions, and 
 * determines what should happen with the current query string when (potentially) navigating to a new URL.
 */
export type PreserveQuery = boolean | string | string[];

/**
 * Defines the valid shape of the state object that must be in the windows History API at all times for proper 
 * operation of the library.
 */
export type State = {
    /**
     * Holds the state data associated to path routing.
     */
    path: any;
    /**
     * Holds the state data associated to hash routing.
     * 
     * For single (or traditional) hash routing, the value is stored using the `single` key.  For multi-hash routing, 
     * the value is stored using the hash identifier as the key.
     */
    hash: Record<string, any>;
}

/**
 * Defines the possible data types for route parameter values.
 */
export type ParameterValue = string | number | boolean;

/**
 * Defines the shape of the data generated by router engines regarding routes.
 */
export type RouteStatus = {
    /**
     * Indicates whether the route matches the current URL.
     */
    match: boolean;
    /**
     * Contains the route's parameters, if any.
     * 
     * This is only available if the route has matched.
     */
    routeParams?: Record<string, ParameterValue>;
}

/**
 * Defines the shape of predicate functions that are used to further test if a route should be matched.
 */
export type AndUntyped = (params: Record<string, ParameterValue> | undefined) => boolean;

/**
 * Defines the core properties of a route definition.
 */
export type CoreRouteInfo = {
    /**
     * An optional predicate function that is used to further test if the route should be matched.
     */
    and?: AndUntyped;
    /**
     * A Boolean value that determines if the route's match status should be ignored for fallback purposes.
     */
    ignoreForFallback?: boolean;
}

/**
 * Defines the shape of a route definition that is based on a regular expression.
 */
export type RegexRouteInfo = CoreRouteInfo & {
    /**
     * The regular expression that the URL's pathname must match.
     * 
     * Any capturing groups in the regular expression are treated as route parameters.
     */
    regex: RegExp;
};

/**
 * Defines the shape of a route definition that is based on a string pattern.
 */
export type PatternRouteInfo = CoreRouteInfo & {
    /**
     * The pattern that the URL's pathname must match.  It can contain route parameters in the form of `:paramName`.
     */
    pattern?: string;
    /**
     * Whether the pattern is case-sensitive.
     * @default false
     */
    caseSensitive?: boolean;
};

/**
 * Defines the shape of a route definition.
 */
export type RouteInfo = RegexRouteInfo | PatternRouteInfo;

/**
 * Defines the options that can be used when calling `Location.goTo`.
 */
export type GoToOptions = {
    /**
     * Whether to replace the current URL in the history stack.
     * @default false
     */
    replace?: boolean;
    /**
     * The state object to associate with the new URL that is conformant with what this router library expects.
     */
    state?: State;
    /**
     * Whether to preserve the current query string in the new URL.
     * 
     * New URL's can specify a query string, and if query string preservation is requested, the query parameters from 
     * the current URL will be appended with the ones from the new URL.
     */
    preserveQuery?: PreserveQuery;
}

/**
 * Defines the options that can be used when calling `Location.navigate`.
 */
export type NavigateOptions = Omit<GoToOptions, 'state'> & {
    /**
     * The state data to associate with the new URL and hash value.
     */
    state?: any;
} & ({
    /**
     * The hash value that determines the routing universe in which navigation will take place.
     */
    hash?: Exclude<Hash, false>;
} | {
    /**
     * The hash value that determines the routing universe in which navigation will take place.
     */
    hash?: false;
    /**
     * Determines whether the current hash value should be preserved when navigating.
     * 
     * **IMPORTANT**:  This option is only valid for path routing scenarios.
     */
    preserveHash?: boolean;
});

/**
 * Defines the capabilities of the location object, central for all routing functionality.
 */
export interface Location {
    /**
     * Gets a reactive URL object with the current window's URL.
     */
    readonly url: URL;
    /**
     * Gets the current hash path or paths, depending on how the library was initialized.
     * 
     * If the library was initialized with the `hashMode` option set to `single`, do 
     * `location.hashPaths.single` to obtain the one path.  If it was set to `multi`, do 
     * `location.hashPaths.<ID>`, where `<ID>` is the wanted path' identifier.
     */
    readonly hashPaths: Record<string, string>;
    /**
     * Gets the current state object associated with the current URL that responds to the given hash value.
     * @param hash The hash value to get the state for.
     */
    getState(hash: Hash): any;
    /**
     * Navigates to the specified URL as it is given.
     * 
     * It will push new URL's by default.  To instead replace the current URL, set the `replace` option to `true`.
     * 
     * **IMPORTANT:**  This method can only preserve query string values.  This method does not accept a `hash` value, 
     * meaning that it cannot associate the navigation or state object with a given routing universe.  Use this method 
     * only when you know this is the desired behavior.  Otherwise, just use `Location.navigate()`.
     * @param url The URL to navigate to.  Use an empty string (`""`) to navigate to the current URL, a. k. a., shallow 
     * routing.
     * @param options Options for navigation.
     */
    goTo(url: string, options?: GoToOptions): void;
    /**
     * Navigates to the specified URL, taking into account the specified hash value, making sure navigation and state 
     * value are associated with the correct routing universe.
     * 
     * It will push new URL's by default.  To instead replace the current URL, set the `replace` option to `true`.
     * 
     * ### About Paths
     * 
     * You should be able to specify relative or full paths, with or without query string values, or even just a query 
     * string.  The value of `hash` will be used to determine where in the URL to put this path and the specified state 
     * data.
     * @param hash The hash value to associate with the navigation.
     * @param path The path to navigate to.
     * @param options Options for navigation.
     */
    navigate(url: string, options?: NavigateOptions): void;
    /**
     * Moves back one entry in the history stack.
     * This is equivalent to calling `history.back()` but uses the configured HistoryApi implementation.
     */
    back(): void;
    /**
     * Moves forward one entry in the history stack.
     * This is equivalent to calling `history.forward()` but uses the configured HistoryApi implementation.
     */
    forward(): void;
    /**
     * Moves to a specific entry in the history stack by its relative position.
     * @param delta The number of entries to move. Negative values go back, positive values go forward.
     */
    go(delta: number): void;
    /**
     * Disposes of the location object, cleaning up any resources.
     */
    dispose(): void;
    /**
     * Adds an event listener for the `beforfeNavigate` event.
     * 
     * This event has the ability to cancel navigation by calling the `cancel` method on the event object.
     * 
     * **IMPORTANT:**  This is a feature only available when initializing the routing library with the 
     * {@link initFull} function.
     * @param event The event to listen for.
     * @param callback The callback to invoke when the event occurs.
     * @returns A function that removes the event listener.
     */
    on(event: 'beforeNavigate', callback: (event: BeforeNavigateEvent) => void): () => void;
    /**
     * Adds an event listener for the `navigationCancelled` event.
     * 
     * This event occurs when navigation is cancelled by a handler of the `beforeNavigate` event.
     * 
     * **IMPORTANT:**  This is a feature only available when initializing the routing library with the
     * {@link initFull} function.
     * @param event The event to listen for.
     * @param callback The callback to invoke when the event occurs.
     * @returns A function that removes the event listener.
     */
    on(event: 'navigationCancelled', callback: (event: NavigationCancelledEvent) => void): () => void;
}

/**
 * Defines the events that can be listened for on the location object.
 */
export type Events = 'beforeNavigate' | 'navigationCancelled';

/**
 * Represents a navigation event.
 */
export type NavigationEvent = {
    /**
     * The URL that was specified for navigation.
     */
    url: string;
    /**
     * The state object that was specified along with the URL.
     */
    state: unknown;
    /**
     * The method of navigation that was used.
     */
    method: 'push' | 'replace';
}

/**
 * Represents an event that occurs before navigation takes place.
 */
export type BeforeNavigateEvent = NavigationEvent & {
    /**
     * Whether the navigation was cancelled by a previously-executed callback o the `beforeNavigate` 
     * event.
     */
    wasCancelled: boolean;
    /**
     * The reason that was specified when the event was cancelled.
     */
    cancelReason: any;
    /**
     * Cancels the navigation event.
     * @param cause The reason for cancelling the navigation.
     */
    cancel(cause?: any): void;
}

/**
 * Represents an event that occurs when navigation is cancelled.
 */
export type NavigationCancelledEvent = NavigationEvent & {
    cause: any;
};

/**
 * Defines the possible settings that can be set in `Link` components to control when they are considered active and 
 * how they look like when active.
 */
export type ActiveState = {
    /**
     * Sets the class or classes that the link will use when rendering as active.
     * 
     * For example, set it to `"active"` for Bootstrap setups.
     * 
     * **TIP**:  You can use any value type that is accepted by the popular `clsx` library.
     */
    class?: ClassValue;
    /**
     * Sets the style that the link will use when rendering as active.
     * 
     * This can be a string of CSS styles or an object of key-value pairs.
     */
    style?: HTMLAnchorAttributes['style'] | Record<string, string>;
    /**
     * Sets additional ARIA attributes when the link is active.
     * 
     * ### aria-selected
     * Use it for `gridcell`, `option`, `row`, `tab`, and `treeitem` roles to indicate the current item in a
     * selection.
     * 
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-selected)
     * 
     * ### aria-current
     * Use it for `article`, `cell`, `columnheader`, `document`, `feed`, `listitem`, `math`, `rowheader`,
     * `section`, `table`, and `treeitem` roles to indicate the current item within a container or set of related
     * items.
     * 
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current)
     */
    aria?: AriaAttributes;
}

/**
 * Defines the type of function accepted by the `Fallback` component via its `when` property.
 * 
 * @param routeStatus The current route status data from the parent router.
 * @param noMatches The value that the parent router has calculated as per standard fallback logic.
 * @returns `true` if the fallback content should be shown; `false` to prevent content from being shown.
 */
export type WhenPredicate = (routeStatus: Record<string, RouteStatus>, noMatches: boolean) => boolean;

/**
 * Defines the shape of logger objects that can be given to this library during initialization.
 */
export interface ILogger {
    /**
     * See `console.debug()` for reference.
     */
    debug: (...args: any[]) => void;
    /**
     * See `console.log()` for reference.
     */
    log: (...args: any[]) => void;
    /**
     * See `console.warn()` for reference.
     */
    warn: (...args: any[]) => void;
    /**
     * See `console.error()` for reference.
     */
    error: (...args: any[]) => void;
};

/**
 * Library's routing options.
 */
export type RoutingOptions = {
    /**
     * Whether to use a single or multiple hash mode.  In single hash mode, the hash value is always one path; in multi 
     * mode, the hash value can be multiple paths.
     * 
     * The multiple paths option shapes the hash value as:  `'#id1=/path/of/id1;id2=/path/of/id2;...'`.
     * 
     * @default 'single'
     */
    hashMode?: 'single' | 'multi';
    /**
     * Mode routers operate when their `hash` property is not set (left `undefined`).
     * 
     * In short:  It tells the library what type of routing is assumed when no `hash` property is specified in `Router`, 
     * `Route`, `Fallback`, `Link`, or `RouterTrace` components.
     * 
     * When set to `'path'`, create components for hash routing by setting the `hash` property to `true` or a string 
     * identifier; when set to `'hash'`, create components for path routing by setting the `hash` property to `false`.
     * 
     * @default 'path'
     * 
     * @example
     * ```svelte
     * // In main.ts:
     * init({ implicitMode: 'hash' });
     * 
     * // In App.svelte:
     * <Router>
     *    <Route path="/path1">
     *        <View1 />
     *    </Route>
     * </Router>
     * ```
     * 
     * Even though the `hash` property is not set in the `Router` or `Route` components, the library will treat both 
     * as hash-routing components because the `implicitMode` option was set to `'hash'`.
     */
    implicitMode?: 'hash' | 'path';
}

/**
 * Internal representation of routing options, including additional flags used internally by the library.
 *
 * _Meaningful only for library extension packages that need additional control over routing options._
 */
export type ExtendedRoutingOptions = RoutingOptions & {
    disallowPathRouting?: boolean;
    disallowHashRouting?: boolean;
    disallowMultiHashRouting?: boolean;
};

/**
 * Library's tracing options.
 */
export type TraceOptions = {
    /**
     * Whether to trace the router hierarchy.
     * 
     * This consumes extra RAM and a bit more CPU cycles.  Disable it on production builds.
     * @default false
     */
    routerHierarchy?: boolean;
};


/**
 * Library's initialization options.
 */
export type InitOptions = RoutingOptions & {
    /**
     * Tracing options that generally should be off for production builds.
     */
    trace?: TraceOptions;
    /**
     * Controls logging.  If `true`, the default logger that logs to the console is used.  If `false`, logging is 
     * turned off.  If an object is provided, it is used as the logger.
     * 
     * Logging is turned on by default.
     * 
     * **TIP**: You can provide your own logger implementation to integrate with your application's logging system.
     */
    logger?: boolean | ILogger;
}

/**
 * Extended initialization options that include all routing options.
 * 
 * _Meaningful only for library extension packages that need additional control over routing options._
 */
export type ExtendedInitOptions = ExtendedRoutingOptions & Pick<InitOptions, 'trace' | 'logger'>;

/**
 * Defines an abstraction over the browser's History API that provides consistent navigation
 * and state management across different environments (browser, SvelteKit, memory-only, etc.).
 * 
 * This interface extends the standard History API with a reactive URL tracking capability
 * needed for the routing library.
 */
export interface HistoryApi extends History {
    /**
     * Reactive URL object that reflects the current location.
     * 
     * Implementations should ensure this stays synchronized with navigation changes.
     */
    readonly url: URL;

    /**
     * Cleans up event listeners and resources used by the HistoryApi implementation.
     * Should be called when the implementation is no longer needed to prevent memory leaks.
     */
    dispose(): void;
}

/**
 * Extended HistoryApi interface for full-mode routing that supports navigation events.
 * Used by LocationFull to provide beforeNavigate and navigationCancelled event capabilities.
 */
export interface FullModeHistoryApi extends HistoryApi {
    /**
     * Subscribe to navigation events.
     */
    on(event: 'beforeNavigate', callback: (event: BeforeNavigateEvent) => void): () => void;
    on(event: 'navigationCancelled', callback: (event: NavigationCancelledEvent) => void): () => void;
}
